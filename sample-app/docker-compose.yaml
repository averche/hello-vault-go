version: "3.9"
services:

  app:
    build: .
    networks:
      - my-network
    environment:
      MY_ADDRESS:                   :8080
      VAULT_ADDRESS:                http://vault-server1:8200
      VAULT_APPROLE_ROLE_ID:        demo-web-app
      VAULT_APPROLE_SECRET_ID_FILE: /tmp/secret
      VAULT_DATABASE_CREDS_PATH:    database/creds/dev-readonly
      VAULT_API_KEY_PATH:           api-key
      VAULT_API_KEY_MOUNT_PATH:     kv-v2
      VAULT_API_KEY_FIELD:          api-key-field
      DATABASE_HOSTNAME:            database
      DATABASE_PORT:                5432
      DATABASE_NAME:                postgres
      DATABASE_TIMEOUT:             10s
      SECURE_SERVICE_ADDRESS:       http://secure-service/api
    volumes:
      - type:   volume
        source: trusted-orchestrator-volume
        target: /tmp
    ports:
      - "8080:8080"
    depends_on:
      vault-server1:
        condition: service_healthy
      trusted-orchestrator:
        condition: service_healthy
      database:
        condition: service_healthy
      secure-service:
        condition: service_healthy
      dns:
        condition: service_healthy

  vault-server1:
    build: ./docker-compose-setup/vault-server/
    networks:
      - my-network
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      APPROLE_ROLE_ID:         demo-web-app
      ORCHESTRATOR_TOKEN:      insecure-token
      DATABASE_HOSTNAME:       database
      DATABASE_PORT:           5432
      API_KEY_PATH:            kv-v2/api-key
      API_KEY_FIELD:           api-key-field
    ports:
      - "8901:8200"
    depends_on:
      database:
        condition: service_healthy
      dns:
        condition: service_healthy

  vault-server2:
    build: ./docker-compose-setup/vault-server/
    networks:
      - my-network
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      APPROLE_ROLE_ID:         demo-web-app
      ORCHESTRATOR_TOKEN:      insecure-token
      DATABASE_HOSTNAME:       database
      DATABASE_PORT:           5432
      API_KEY_PATH:            kv-v2/api-key
      API_KEY_FIELD:           api-key-field
    ports:
      - "8902:8200"
    depends_on:
      database:
        condition: service_healthy
      dns:
        condition: service_healthy

  trusted-orchestrator:
    build: ./docker-compose-setup/trusted-orchestrator
    networks:
      - my-network
    environment:
      VAULT_ADDRESS:      http://vault-server1:8200
      ORCHESTRATOR_TOKEN: insecure-token
    volumes:
      - type:   volume
        source: trusted-orchestrator-volume
        target: /tmp
    depends_on:
      vault-server1:
        condition: service_healthy
      dns:
        condition: service_healthy

  database:
    image: postgres:14.0
    networks:
      - my-network
    environment:
      POSTGRES_PASSWORD: rootpassword
    volumes:
      - type:   bind
        source: ./docker-compose-setup/database/
        target: /docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test:         [ "CMD", "/usr/bin/pg_isready" ]
      start_period: 1s
      interval:     1s
      timeout:      1s
      retries:      30
    depends_on:
      dns:
        condition: service_healthy

  # a simulated 3rd party service that requires a specific header to get a 200 response
  secure-service:
    image: nginx:latest
    networks:
      - my-network
    environment:
      EXPECTED_API_KEY: my-secret-key # sets the expected value for incoming requests' header X-API-KEY
    volumes:
      - type:   bind
        source: ./docker-compose-setup/secure-service/default.conf.template
        target: /etc/nginx/templates/default.conf.template
    ports:
      - "1717:80"
    healthcheck:
      test:         curl --fail -s http://localhost/healthcheck || exit 1
      start_period: 1s
      interval:     1s
      timeout:      1s
      retries:      30
    depends_on:
      dns:
        condition: service_healthy

  dns:
     image: mvance/unbound:latest
     network_mode: host

  # a dummy service which blocks "docker compose up -d" from returning until all services are up & healthy
  app-healthy:
    image: alpine:latest
    networks:
      - my-network
    command: [ "echo", "all services are up & healthy" ]
    depends_on:
      app:
        condition: service_healthy

volumes:
  trusted-orchestrator-volume:

networks:
  my-network:
    driver: bridge